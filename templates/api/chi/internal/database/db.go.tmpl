package database

import (
	"database/sql"
	"fmt"
	
	{{if eq .DatabaseType "postgresql" -}}
	_ "github.com/lib/pq"
	{{- else if eq .DatabaseType "mysql" -}}
	_ "github.com/go-sql-driver/mysql"
	{{- else if eq .DatabaseType "sqlite" -}}
	_ "github.com/mattn/go-sqlite3"
	{{- end}}
	
	"{{.ModulePath}}/internal/config"
)

// Connect establishes a connection to the database
func Connect(cfg *config.Config) (*sql.DB, error) {
	var dsn string
	var driverName string
	
	{{if eq .DatabaseType "postgresql" -}}
	// PostgreSQL connection string
	dsn = fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBSSLMode)
	driverName = "postgres"
	{{- else if eq .DatabaseType "mysql" -}}
	// MySQL connection string
	dsn = fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?parseTime=true",
		cfg.DBUser, cfg.DBPassword, cfg.DBHost, cfg.DBPort, cfg.DBName)
	driverName = "mysql"
	{{- else if eq .DatabaseType "sqlite" -}}
	// SQLite connection string
	dsn = cfg.DBPath
	driverName = "sqlite3"
	{{- end}}
	
	db, err := sql.Open(driverName, dsn)
	if err != nil {
		return nil, err
	}
	
	if err := db.Ping(); err != nil {
		return nil, err
	}
	
	return db, nil
}

{{if (call .HasFeature "sql-migrations") -}}
// Migrate runs database migrations
func Migrate(cfg *config.Config) error {
	// Implementation depends on your migration library choice
	// Here's an example using golang-migrate
	
	migrationSource := "file://./migrations"
	
	var dsn string
	{{if eq .DatabaseType "postgresql" -}}
	dsn = fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=%s",
		cfg.DBUser, cfg.DBPassword, cfg.DBHost, cfg.DBPort, cfg.DBName, cfg.DBSSLMode)
	{{- else if eq .DatabaseType "mysql" -}}
	dsn = fmt.Sprintf("mysql://%s:%s@tcp(%s:%d)/%s",
		cfg.DBUser, cfg.DBPassword, cfg.DBHost, cfg.DBPort, cfg.DBName)
	{{- else if eq .DatabaseType "sqlite" -}}
	dsn = fmt.Sprintf("sqlite3://%s", cfg.DBPath)
	{{- end}}
	
	// You would implement the migration code here using your preferred library
	// Example using golang-migrate:
	// m, err := migrate.New(migrationSource, dsn)
	// if err != nil {
	//     return err
	// }
	// err = m.Up()
	// if err != nil && err != migrate.ErrNoChange {
	//     return err
	// }
	
	return nil
}
{{- end}}
