package middleware

import (
	"crypto/subtle"
	"net/http"
)

// BasicAuth implements HTTP Basic Authentication
func BasicAuth(username, password string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// Get credentials
			user, pass, ok := r.BasicAuth()
			if !ok {
				unauthorized(w)
				return
			}
			
			// Check credentials
			usernameMatch := subtle.ConstantTimeCompare([]byte(user), []byte(username))
			passwordMatch := subtle.ConstantTimeCompare([]byte(pass), []byte(password))
			
			if usernameMatch != 1 || passwordMatch != 1 {
				unauthorized(w)
				return
			}
			
			next.ServeHTTP(w, r)
		})
	}
}

func unauthorized(w http.ResponseWriter) {
	w.Header().Set("WWW-Authenticate", `Basic realm="restricted", charset="UTF-8"`)
	http.Error(w, "Unauthorized", http.StatusUnauthorized)
}
