package main

import (
	"context"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

const (
	defaultIdleTimeout    = time.Minute
	defaultReadTimeout    = 5 * time.Second
	defaultWriteTimeout   = 10 * time.Second
	defaultShutdownPeriod = 30 * time.Second
)

type config struct {
	baseURL  string
	httpPort int
{{if .Database}}
	db struct {
		dsn         string
		maxOpenConn int
		maxIdleConn int
		maxIdleTime time.Duration
	}
{{end}}
{{if .UseBasicAuth}}
	basicAuth struct {
		username       string
		hashedPassword string
	}
{{end}}
}

type application struct {
	config config
	logger *slog.Logger
{{if .Database}}
	db     *Database
{{end}}
}

func main() {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{Level: slog.LevelDebug}))

	err := run(logger)
	if err != nil {
		trace := string(debug.Stack())
		logger.Error(err.Error(), "trace", trace)
		os.Exit(1)
	}
}

func run(logger *slog.Logger) error {
	var cfg config

	cfg.baseURL = os.Getenv("BASE_URL")
	if cfg.baseURL == "" {
		cfg.baseURL = "http://localhost:4000"
	}

	cfg.httpPort = 4000
	if port := os.Getenv("HTTP_PORT"); port != "" {
		var err error
		cfg.httpPort, err = strconv.Atoi(port)
		if err != nil {
			return fmt.Errorf("invalid HTTP_PORT: %w", err)
		}
	}

{{if .Database}}
	cfg.db.dsn = os.Getenv("DB_DSN")
	if cfg.db.dsn == "" {
		cfg.db.dsn = "postgres://user:pass@localhost/db"
	}

	cfg.db.maxOpenConn = 25
	cfg.db.maxIdleConn = 25
	cfg.db.maxIdleTime = 15 * time.Minute
{{end}}

{{if .UseBasicAuth}}
	cfg.basicAuth.username = os.Getenv("BASIC_AUTH_USERNAME")
	if cfg.basicAuth.username == "" {
		cfg.basicAuth.username = "admin"
	}

	cfg.basicAuth.hashedPassword = os.Getenv("BASIC_AUTH_HASHED_PASSWORD")
	if cfg.basicAuth.hashedPassword == "" {
		cfg.basicAuth.hashedPassword = "$2a$10$jRb2qniNcoCyQM23T59RfeEQUbgdAXfR6S0scynmKfJa5Gj3arGJa" // Default: password
	}
{{end}}

	app := &application{
		config: cfg,
		logger: logger,
	}

{{if .Database}}
	db, err := openDB(cfg)
	if err != nil {
		return err
	}
	defer db.Close()
	app.db = db
{{end}}

	return app.serveHTTP()
}

func (app *application) serveHTTP() error {
	srv := &http.Server{
		Addr:         fmt.Sprintf(":%d", app.config.httpPort),
		Handler:      app.routes(),
		ErrorLog:     slog.NewLogLogger(app.logger.Handler(), slog.LevelWarn),
		IdleTimeout:  defaultIdleTimeout,
		ReadTimeout:  defaultReadTimeout,
		WriteTimeout: defaultWriteTimeout,
	}

	shutdownError := make(chan error)

	go func() {
		quit := make(chan os.Signal, 1)
		signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
		<-quit

		app.logger.Info("shutting down server")

		ctx, cancel := context.WithTimeout(context.Background(), defaultShutdownPeriod)
		defer cancel()

		err := srv.Shutdown(ctx)
		if err != nil {
			shutdownError <- err
		}

		app.logger.Info("completing background tasks", "addr", srv.Addr)
		
		shutdownError <- nil
	}()

	app.logger.Info("starting server", "addr", srv.Addr)

	err := srv.ListenAndServe()
	if !errors.Is(err, http.ErrServerClosed) {
		return err
	}

	err = <-shutdownError
	if err != nil {
		return err
	}

	app.logger.Info("server stopped")

	return nil
}

func (app *application) routes() http.Handler {
	r := chi.NewRouter()

	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

{{if .UseAccessLogging}}
	r.Use(app.logAccess)
{{end}}

	r.Get("/api/health", app.healthCheckHandler)

	// Protected routes
{{if .UseBasicAuth}}
	r.Group(func(r chi.Router) {
		r.Use(app.basicAuthMiddleware)

		// Add protected routes here
		r.Get("/api/protected", app.protectedHandler)
	})
{{end}}

	return r
}

{{if .UseAccessLogging}}
func (app *application) logAccess(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)
		next.ServeHTTP(ww, r)

		app.logger.Info("request completed",
			"method", r.Method,
			"url", r.URL.String(),
			"status", ww.Status(),
			"bytes", ww.BytesWritten(),
			"duration", time.Since(start),
		)
	})
}
{{end}}

{{if .UseBasicAuth}}
func (app *application) basicAuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		username, password, ok := r.BasicAuth()
		if !ok {
			w.Header().Set("WWW-Authenticate", `Basic realm="restricted", charset="UTF-8"`)
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}

		if username != app.config.basicAuth.username || !checkPassword(password, app.config.basicAuth.hashedPassword) {
			w.Header().Set("WWW-Authenticate", `Basic realm="restricted", charset="UTF-8"`)
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}

		next.ServeHTTP(w, r)
	})
}

func checkPassword(password, hashedPassword string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
	return err == nil
}
{{end}}

func (app *application) healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	data := map[string]string{
		"status": "available",
		"system_info": {
			"environment": app.config.env,
		},
	}

	err := app.writeJSON(w, http.StatusOK, data, nil)
	if err != nil {
		app.serverError(w, r, err)
	}
}

{{if .UseBasicAuth}}
func (app *application) protectedHandler(w http.ResponseWriter, r *http.Request) {
	data := map[string]string{
		"message": "This is a protected resource",
	}

	err := app.writeJSON(w, http.StatusOK, data, nil)
	if err != nil {
		app.serverError(w, r, err)
	}
}
{{end}}

func (app *application) writeJSON(w http.ResponseWriter, status int, data interface{}, headers http.Header) error {
	js, err := json.Marshal(data)
	if err != nil {
		return err
	}

	for key, value := range headers {
		w.Header()[key] = value
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	w.Write(js)

	return nil
}

func (app *application) serverError(w http.ResponseWriter, r *http.Request, err error) {
	app.logger.Error(err.Error(), "method", r.Method, "uri", r.URL.RequestURI())

	message := "the server encountered a problem and could not process your request"
	app.errorResponse(w, r, http.StatusInternalServerError, message)
}

func (app *application) errorResponse(w http.ResponseWriter, r *http.Request, status int, message string) {
	data := map[string]string{
		"error": message,
	}

	err := app.writeJSON(w, status, data, nil)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
	}
}

{{if .Database}}
func openDB(cfg config) (*Database, error) {
	db, err := sql.Open("postgres", cfg.db.dsn)
	if err != nil {
		return nil, err
	}

	db.SetMaxOpenConns(cfg.db.maxOpenConn)
	db.SetMaxIdleConns(cfg.db.maxIdleConn)
	db.SetConnMaxIdleTime(cfg.db.maxIdleTime)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	err = db.PingContext(ctx)
	if err != nil {
		return nil, err
	}

	return &Database{db}, nil
}

type Database struct {
	*sql.DB
}
{{end}}
