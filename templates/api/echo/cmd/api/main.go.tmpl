package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.ModulePath}}/internal/config"
	{{if ne .DatabaseType "none"}}"{{.ModulePath}}/internal/database"{{end}}
	{{if (call .HasFeature "email")}}"{{.ModulePath}}/internal/email"{{end}}
	"{{.ModulePath}}/internal/handlers"
	{{if (call .HasFeature "basic-auth")}}"{{.ModulePath}}/internal/middleware"{{end}}

	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware"
)

func main() {
	// Load configuration
	cfg := config.Load()

	// Initialize Echo instance
	e := echo.New()
	e.HideBanner = true

	// Middleware
	e.Use(echoMiddleware.Logger())
	e.Use(echoMiddleware.Recover())
	e.Use(echoMiddleware.CORS())

	{{if (call .HasFeature "basic-auth")}}// Authentication middleware
	e.Use(middleware.BasicAuth(cfg))
	{{end}}

	{{if ne .DatabaseType "none"}}// Initialize database
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()
	{{end}}

	// Initialize handlers
	apiHandler := handlers.NewAPIHandler({{if ne .DatabaseType "none"}}db{{else}}nil{{end}})

	// Routes
	e.GET("/api/health", apiHandler.HealthCheck)
	e.GET("/api/status", apiHandler.Status)

	// Start server
	go func() {
		if err := e.Start(":" + cfg.Port); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shut down the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := e.Shutdown(ctx); err != nil {
		log.Fatalf("Server shutdown failed: %v", err)
	}
}
