package handlers

import (
	"database/sql"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
)

// APIHandler handles API requests
type APIHandler struct {
	db *sql.DB
}

// NewAPIHandler creates a new API handler
func NewAPIHandler(db *sql.DB) *APIHandler {
	return &APIHandler{
		db: db,
	}
}

// HealthCheck handles the health check endpoint
// @Summary Health Check
// @Description Check if the API is running
// @Tags system
// @Produce json
// @Success 200 {object} map[string]string
// @Router /api/health [get]
func (h *APIHandler) HealthCheck(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]string{
		"status": "OK",
		"time":   time.Now().Format(time.RFC3339),
	})
}

// Status handles the status endpoint
// @Summary API Status
// @Description Get the API status with more details
// @Tags system
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /api/status [get]
func (h *APIHandler) Status(c echo.Context) error {
	{{if ne .DatabaseType "none"}}
	// Check database connection if available
	dbStatus := "unavailable"
	if h.db != nil {
		if err := h.db.Ping(); err == nil {
			dbStatus = "connected"
		}
	}
	{{end}}

	return c.JSON(http.StatusOK, map[string]interface{}{
		"status": "OK",
		"time":   time.Now().Format(time.RFC3339),
		"api_version": "1.0.0",
		{{if ne .DatabaseType "none"}}"database": dbStatus,{{end}}
		"environment": "{{.ConfigType}}",
	})
}

// Handler functions
func getItems(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"items": []interface{}{},
	})
}

func createItem(c echo.Context) error {
	return c.JSON(http.StatusCreated, map[string]interface{}{
		"id":      "1",
		"message": "Item created",
	})
}

func getItem(c echo.Context) error {
	id := c.Param("id")
	return c.JSON(http.StatusOK, map[string]interface{}{
		"id":   id,
		"name": "Sample Item",
	})
}

func updateItem(c echo.Context) error {
	id := c.Param("id")
	return c.JSON(http.StatusOK, map[string]interface{}{
		"id":      id,
		"message": "Item updated",
	})
}

func deleteItem(c echo.Context) error {
	return c.NoContent(http.StatusNoContent)
}
