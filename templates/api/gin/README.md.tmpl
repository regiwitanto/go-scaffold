# {{.ModulePath}}

A Go API scaffold built with the Gin framework{{if eq .DatabaseType "postgresql"}}, featuring PostgreSQL integration{{else if eq .DatabaseType "mysql"}}, featuring MySQL integration{{end}}{{if (call .HasFeature "basic-auth")}}, secure authentication{{end}}{{if (call .HasFeature "admin-makefile")}}, and development utilities{{end}}.

## Prerequisites

- Go 1.21 or higher
- PostgreSQL {{if eq .DatabaseType "postgresql"}}(required){{else}}(optional){{end}}
- MySQL {{if eq .DatabaseType "mysql"}}(required){{else}}(optional){{end}}


## Getting Started

### Installation

1. Clone or download this repository
2. Install dependencies:

```bash
go mod tidy
```

### Configuration

{{if eq .ConfigType "env"}}
This application uses environment variables for configuration. Create a `.env` file in the root directory:

```bash
# Server Configuration
PORT=8080
ENV=development

{{if ne .DatabaseType "none"}}# Database Configuration
DB_USER=postgres
DB_PASSWORD=your_password
DB_NAME=your_database
DB_HOST=localhost
DB_PORT=5432
DB_SSL_MODE=disable
{{end}}
{{if (call .HasFeature "email")}}
# If you're using email notifications
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your_username
SMTP_PASSWORD=your_password
SMTP_SENDER=noreply@example.com
{{end}}
```
{{else}}
This application uses command-line flags for configuration:

```bash
./{{if .Binary}}{{.Binary}}{{else}}app{{end}} --port=8080 --env=development {{if ne .DatabaseType "none"}}--db-user=postgres --db-password=your_password --db-name=your_database --db-host=localhost --db-port=5432{{end}}
```
{{end}}

{{if ne .DatabaseType "none"}}
### Database Setup

#### Step-by-step Database Setup

1. **Install and start your database**:
   {{if eq .DatabaseType "postgresql"}}Make sure PostgreSQL is installed and running on your system.
   {{else if eq .DatabaseType "mysql"}}Make sure MySQL is installed and running on your system.

   {{end}}

2. **Create a database**:
   {{if eq .DatabaseType "postgresql"}}
   ```bash
   # Method 1: Using createdb
   createdb your_database
   
   # Method 2: Using psql
   psql -c "CREATE DATABASE your_database;"
   ```
   {{else if eq .DatabaseType "mysql"}}
   ```bash
   # Method 1: Using mysql command
   mysql -u root -p -e "CREATE DATABASE your_database;"
   
   # Method 2: Using mysql interactive shell
   mysql -u root -p
   CREATE DATABASE your_database;
   EXIT;
   ```
   {{end}}

3. **Update the database configuration**:
   {{if eq .ConfigType "env"}}
   Edit your `.env` file to include the correct database credentials:
   ```
   DB_USER={{if eq .DatabaseType "postgresql"}}postgres{{else if eq .DatabaseType "mysql"}}root{{end}}
   DB_PASSWORD=your_password
   DB_NAME=your_database
   DB_HOST=localhost
   DB_PORT={{if eq .DatabaseType "postgresql"}}5432{{else if eq .DatabaseType "mysql"}}3306{{end}}
   {{if eq .DatabaseType "postgresql"}}DB_SSL_MODE=disable{{end}}
   ```
   {{else}}
   When running the application, provide the database flags:
   ```bash
   ./app --db-user={{if eq .DatabaseType "postgresql"}}postgres{{else if eq .DatabaseType "mysql"}}root{{end}} --db-password=your_password --db-name=your_database --db-host=localhost --db-port={{if eq .DatabaseType "postgresql"}}5432{{else if eq .DatabaseType "mysql"}}3306{{end}}
   ```
   {{end}}

{{if (call .HasFeature "sql-migrations")}}
4. **Run database migrations**:
   ```bash
   # Set the DATABASE_URL environment variable
   {{if eq .DatabaseType "postgresql"}}
   export DATABASE_URL="postgres://username:password@localhost:5432/your_database?sslmode=disable"
   {{else if eq .DatabaseType "mysql"}}
   export DATABASE_URL="mysql://username:password@localhost:3306/your_database"

   {{end}}
   
   # Run migrations
   make migrate-up
   
   # Verify migrations applied successfully
   make migrate-status  # or use: migrate -path ./migrations -database "${DATABASE_URL}" version
   ```
{{end}}

5. **Verify database connection**:
   After configuring your database and starting the application, check the logs to ensure it connected successfully.
{{end}}

### Running the Application

#### Step-by-step Guide

1. **Ensure dependencies are installed**:
```bash
go mod tidy
```

2. **Build and run the application**:
```bash
# Option 1: Build and run in one command
make run

# Option 2: Build the binary first, then run it
make build
./{{if .Binary}}{{.Binary}}{{else}}app{{end}}

# Option 3: Run with Go directly
go run ./cmd/api
```

3. **For development with automatic reloading**:
```bash
{{if (call .HasFeature "live-reload")}}# Live reload is configured in this project
make dev
{{else}}# First install air if you haven't already
go install github.com/cosmtrek/air@latest

# Then run with air
air
{{end}}
```

4. **Verify the application is running**:
```bash
# Check the health endpoint
{{if (call .HasFeature "basic-auth")}}curl -u username:password http://localhost:8080/api/health{{else}}curl http://localhost:8080/api/health{{end}}
```

5. **Troubleshooting**:
   - If you see database connection errors, make sure your database is running and configured correctly
   - If port 8080 is already in use, change the PORT in your configuration
   - Check logs for detailed error messages
```

### API Endpoints

- `GET /api/health` - Health check endpoint
- `GET /api/status` - Application status with version information

{{if (call .HasFeature "basic-auth")}}
## Authentication

This API uses HTTP Basic Authentication. Include the following header with your requests:

```
Authorization: Basic {base64-encoded-credentials}
```

Example using curl:
```bash
curl -u username:password http://localhost:8080/api/health
```
{{end}}

## Project Structure

```
.
├── cmd/
│   └── api/                  # Application entry point
│       └── main.go
├── internal/
{{if ne .DatabaseType "none"}}│   ├── database/             # Database connection and models
│   │   └── db.go
{{end}}│   ├── handlers/             # HTTP handlers
│   │   └── api.go
{{if (call .HasFeature "basic-auth")}}│   ├── middleware/           # HTTP middleware
│   │   └── auth.go
{{end}}│   ├── config/              # Configuration handling
│   │   └── config.go
{{if (call .HasFeature "sql-migrations")}}├── migrations/             # SQL migrations
{{end}}{{if (call .HasFeature "automatic-versioning")}}├── version/               # Application versioning
│   └── version.go
{{end}}├── Makefile                # Build automation
└── README.md                # Documentation
```

{{if (call .HasFeature "admin-makefile")}}
## Available Make Commands

- `make run` - Build and run the application
- `make build` - Build the binary
- `make test` - Run tests
- `make test-coverage` - Run tests with coverage report
{{if (call .HasFeature "live-reload")}}
- `make dev` - Run with live reload
{{end}}
{{if (call .HasFeature "sql-migrations")}}
- `make migrate-up` - Run database migrations
- `make migrate-down` - Rollback database migrations
{{end}}
- `make clean` - Clean build artifacts
{{end}}

## License

This project is licensed under the MIT License - see the LICENSE file for details.
