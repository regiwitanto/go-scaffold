package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	{{if eq .DatabaseType "postgresql" -}}
	"{{.ModulePath}}/internal/database"
	{{- end}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/handlers"
	{{if (call .HasFeature "basic-auth") -}}
	"{{.ModulePath}}/internal/middleware"
	{{- end}}
	{{if (call .HasFeature "automatic-versioning") -}}
	"{{.ModulePath}}/internal/version"
	{{- end}}
)

func main() {
	{{if eq .ConfigType "env" -}}
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}
	{{- else -}}
	// Parse command line flags
	cfg := config.Parse()
	{{- end}}
	
	{{if (call .HasFeature "access-logging") -}}
	// Set up logging
	logger := log.New(os.Stdout, "", log.LstdFlags)
	{{- end}}
	
	{{if eq .DatabaseType "postgresql" -}}
	// Connect to the database
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()
	
	{{if (call .HasFeature "sql-migrations") -}}
	// Run migrations
	if err := database.Migrate(cfg); err != nil {
		log.Fatalf("Failed to run migrations: %v", err)
	}
	{{- end}}
	{{- end}}

	// Create router
	mux := http.NewServeMux()
	
	// Register handlers
	apiHandler := handlers.NewAPIHandler({{if eq .DatabaseType "postgresql"}}db, {{end}}cfg)
	
	{{if (call .HasFeature "basic-auth") -}}
	// Set up middleware
	authMiddleware := middleware.BasicAuth(cfg.AuthUsername, cfg.AuthPassword)
	
	// Register routes with authentication
	mux.HandleFunc("/api/health", authMiddleware(apiHandler.HealthCheck))
	{{if (call .HasFeature "automatic-versioning") -}}
	mux.HandleFunc("/api/status", authMiddleware(apiHandler.Status))
	{{- end}}
	{{- else -}}
	// Register routes
	mux.HandleFunc("/api/health", apiHandler.HealthCheck)
	{{if (call .HasFeature "automatic-versioning") -}}
	mux.HandleFunc("/api/status", apiHandler.Status)
	{{- end}}
	{{- end}}
	
	{{if (call .HasFeature "access-logging") -}}
	// Create a server with access logging
	srv := &http.Server{
		Addr:    fmt.Sprintf(":%d", cfg.Port),
		Handler: middleware.LogRequest(mux, logger),
	}
	{{- else -}}
	// Create a server
	srv := &http.Server{
		Addr:    fmt.Sprintf(":%d", cfg.Port),
		Handler: mux,
	}
	{{- end}}

	// Start the server in a goroutine
	go func() {
		log.Printf("Server starting on port %d", cfg.Port)
		{{if (call .HasFeature "automatic-versioning") -}}
		log.Printf("Version: %s (Build: %s)", version.Version, version.BuildID)
		{{- end}}
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server error: %v", err)
		}
	}()

	// Set up graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exited properly")
}
