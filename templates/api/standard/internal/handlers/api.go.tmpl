package handlers

import (
	"encoding/json"
	"net/http"
	{{if (call .HasFeature "automatic-versioning") -}}
	"runtime"
	"{{.ModulePath}}/internal/version"
	{{- end}}
	
	"{{.ModulePath}}/internal/config"
	{{if eq .DatabaseType "postgresql" -}}
	"database/sql"
	{{- end}}
)

// APIHandler handles API requests
type APIHandler struct {
	{{if eq .DatabaseType "postgresql" -}}
	DB  *sql.DB
	{{- end}}
	Cfg *config.Config
}

// NewAPIHandler creates a new API handler
func NewAPIHandler({{if eq .DatabaseType "postgresql"}}db *sql.DB, {{end}}cfg *config.Config) *APIHandler {
	return &APIHandler{
		{{if eq .DatabaseType "postgresql" -}}
		DB:  db,
		{{- end}}
		Cfg: cfg,
	}
}

// HealthCheck handles the health check endpoint
func (h *APIHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	// Simple health check response
	response := map[string]string{
		"status": "OK",
		"environment": h.Cfg.Env,
	}
	
	{{if eq .DatabaseType "postgresql" -}}
	// Check database connection
	if err := h.DB.Ping(); err != nil {
		response["status"] = "ERROR"
		response["database"] = "disconnected"
		w.WriteHeader(http.StatusServiceUnavailable)
	} else {
		response["database"] = "connected"
	}
	{{- end}}
	
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

{{if (call .HasFeature "automatic-versioning") -}}
// Status returns version and build information
func (h *APIHandler) Status(w http.ResponseWriter, r *http.Request) {
	// Version information response
	response := map[string]string{
		"version":    version.Version,
		"build_id":   version.BuildID,
		"build_time": version.BuildTime,
		"go_version": runtime.Version(),
		"os":         runtime.GOOS,
		"arch":       runtime.GOARCH,
		"environment": h.Cfg.Env,
	}
	
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}
{{- end}}

func apiHandler() http.Handler {
	mux := http.NewServeMux()

	// API v1 routes
	mux.HandleFunc("/v1", welcome)
	mux.HandleFunc("/v1/items", itemsHandler)
	
	// Item ID pattern matcher
	idPattern := regexp.MustCompile(`^/v1/items/(\w+)$`)
	mux.HandleFunc("/v1/items/", func(w http.ResponseWriter, r *http.Request) {
		matches := idPattern.FindStringSubmatch(r.URL.Path)
		if len(matches) < 2 {
			http.NotFound(w, r)
			return
		}
		
		id := matches[1]
		
		switch r.Method {
		case http.MethodGet:
			getItem(w, r, id)
		case http.MethodPut:
			updateItem(w, r, id)
		case http.MethodDelete:
			deleteItem(w, r, id)
		default:
			w.WriteHeader(http.StatusMethodNotAllowed)
		}
	})

	return mux
}

// Handler functions
func welcome(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"message": "Welcome to the API",
	})
}

func itemsHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	
	switch r.Method {
	case http.MethodGet:
		getItems(w, r)
	case http.MethodPost:
		createItem(w, r)
	default:
		w.WriteHeader(http.StatusMethodNotAllowed)
	}
}

func getItems(w http.ResponseWriter, r *http.Request) {
	// In a real application, fetch from database
	items := []Item{
		{ID: "1", Name: "Item One"},
		{ID: "2", Name: "Item Two"},
	}
	json.NewEncoder(w).Encode(map[string][]Item{"items": items})
}

func createItem(w http.ResponseWriter, r *http.Request) {
	var item Item
	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"error": err.Error()})
		return
	}

	// In a real application, save to database
	item.ID = "3" // simulate ID generation

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "Item created",
		"item":    item,
	})
}

func getItem(w http.ResponseWriter, r *http.Request, id string) {
	// In a real application, fetch from database
	item := Item{ID: id, Name: "Sample Item"}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(item)
}

func updateItem(w http.ResponseWriter, r *http.Request, id string) {
	var item Item
	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]string{"error": err.Error()})
		return
	}

	// In a real application, update in database
	item.ID = id // ensure ID matches the URL parameter

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "Item updated",
		"item":    item,
	})
}

func deleteItem(w http.ResponseWriter, r *http.Request, id string) {
	// In a real application, delete from database
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "Item deleted",
		"id":      id,
	})
}
