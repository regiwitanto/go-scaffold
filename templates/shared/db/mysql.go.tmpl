package db

import (
	"database/sql"
	"log"
	"time"
	
	_ "github.com/go-sql-driver/mysql"
)

// Config holds database configuration options
type Config struct {
	DSN         string
	MaxOpenConn int
	MaxIdleConn int
	MaxIdleTime time.Duration
}

// New creates and returns a new Database instance
func New(cfg Config) (*Database, error) {
	// Connect to the database
	db, err := sql.Open("mysql", cfg.DSN)
	if err != nil {
		return nil, err
	}
	
	// Set connection pool settings
	db.SetMaxOpenConns(cfg.MaxOpenConn)
	db.SetMaxIdleConns(cfg.MaxIdleConn)
	db.SetConnMaxIdleTime(cfg.MaxIdleTime)
	
	// Verify connection
	if err := db.Ping(); err != nil {
		return nil, err
	}
	
	log.Println("Database connection established")
	
	return &Database{db}, nil
}

// Database wraps a sql.DB connection pool
type Database struct {
	*sql.DB
}

// Close closes the database connection
func (d *Database) Close() error {
	return d.DB.Close()
}

// ExecuteQuery is a helper for executing non-parameterized queries
func (d *Database) ExecuteQuery(query string) (sql.Result, error) {
	return d.Exec(query)
}
