package handlers

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	"{{.ModulePath}}/internal/templates"
{{if ne .DatabaseType "none" }}
	"{{.ModulePath}}/internal/db"
{{end}}
)

// RegisterRoutes sets up all the routes for the application
{{if ne .DatabaseType "none" }}
func RegisterRoutes(r chi.Router, database *db.Database) {
{{else}}
func RegisterRoutes(r chi.Router) {
{{end}}
	// Home page
	r.Get("/", handleHome)
	
	// About page
	r.Get("/about", handleAbout)
	
	// Contact page
	r.Get("/contact", handleContact)
	r.Post("/contact", handleContactSubmit)
	
{{if ne .DatabaseType "none" }}
	// User pages (only if database is enabled)
	r.Route("/users", func(r chi.Router) {
		r.Get("/", handleListUsers)
		r.Get("/{id}", handleGetUser)
		r.Post("/", handleCreateUser)
		r.Put("/{id}", handleUpdateUser)
		r.Delete("/{id}", handleDeleteUser)
	})
{{end}}
}

// handleHome renders the home page
func handleHome(w http.ResponseWriter, r *http.Request) {
	templates.RenderPage(w, "home.html", map[string]interface{}{
		"Title": "Welcome",
		"Message": "Welcome to our web application",
	})
}

// handleAbout renders the about page
func handleAbout(w http.ResponseWriter, r *http.Request) {
	templates.RenderPage(w, "about.html", map[string]interface{}{
		"Title": "About Us",
		"Content": "This is a web application scaffolded with Echo Scaffold.",
	})
}

// handleContact renders the contact form
func handleContact(w http.ResponseWriter, r *http.Request) {
	templates.RenderPage(w, "contact.html", map[string]interface{}{
		"Title": "Contact Us",
	})
}

// ContactForm represents the contact form data
type ContactForm struct {
	Name    string
	Email   string
	Message string
}

// handleContactSubmit processes the contact form submission
func handleContactSubmit(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		templates.RenderPage(w, "contact.html", map[string]interface{}{
			"Title": "Contact Us",
			"Error": "Invalid form data",
		})
		return
	}
	
	form := ContactForm{
		Name:    r.PostForm.Get("name"),
		Email:   r.PostForm.Get("email"),
		Message: r.PostForm.Get("message"),
	}
	
	// In a real application, you would validate and process the form data
	// For now, just redirect back with a success message
	
	templates.RenderPage(w, "contact.html", map[string]interface{}{
		"Title":   "Contact Us",
		"Success": "Your message has been sent!",
		"FormData": form,
	})
}

{{if ne .DatabaseType "none" }}
// User represents a user in the database
type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// handleListUsers lists all users
func handleListUsers(w http.ResponseWriter, r *http.Request) {
	// In a real application, fetch from database
	users := []User{
		{ID: "1", Name: "John Doe", Email: "john@example.com"},
		{ID: "2", Name: "Jane Smith", Email: "jane@example.com"},
	}
	
	templates.RenderPage(w, "users/list.html", map[string]interface{}{
		"Title": "Users",
		"Users": users,
	})
}

// handleGetUser displays a single user
func handleGetUser(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	
	// In a real application, fetch from database
	user := User{ID: id, Name: "John Doe", Email: "john@example.com"}
	
	templates.RenderPage(w, "users/detail.html", map[string]interface{}{
		"Title": "User Details",
		"User":  user,
	})
}

// handleCreateUser creates a new user
func handleCreateUser(w http.ResponseWriter, r *http.Request) {
	// In a real application, you would parse JSON from request body
	// For this example, we'll just return a mock response
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(`{"id":"3","name":"New User","email":"new@example.com"}`))
}

// handleUpdateUser updates a user
func handleUpdateUser(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	
	// In a real application, you would parse JSON from request body
	// For this example, we'll just return a mock response
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"id":"` + id + `","name":"Updated User","email":"updated@example.com"}`))
}

// handleDeleteUser deletes a user
func handleDeleteUser(w http.ResponseWriter, r *http.Request) {
	// In a real application, delete from database
	
	w.WriteHeader(http.StatusNoContent)
}
{{end}}
