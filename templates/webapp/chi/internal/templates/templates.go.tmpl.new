package templates

import (
	"html/template"
	"net/http"
	"path/filepath"
)

var (
	// templates holds all parsed templates
	templates map[string]*template.Template
)

// Init initializes all templates
func Init() error {
	if templates == nil {
		templates = make(map[string]*template.Template)
	}

	// Define template functions
	funcs := template.FuncMap{
		"safeHTML": func(s string) template.HTML {
			return template.HTML(s)
		},
		"safeURL": func(s string) template.URL {
			return template.URL(s)
		},
	}

	// Find all template files
	pages, err := filepath.Glob("views/*.html")
	if err != nil {
		return err
	}

	// Process each page template
	for _, page := range pages {
		name := filepath.Base(page) // e.g., "home.html"
		
		// Create a template for this page
		tmpl := template.New(name).Funcs(funcs)
		
		// Add layout templates
		layouts, err := filepath.Glob("views/layouts/*.html")
		if err != nil {
			return err
		}
		
		// Add partials
		partials, err := filepath.Glob("views/partials/*.html")
		if err != nil {
			return err
		}
		
		// Combine page with layouts and partials
		files := append([]string{page}, layouts...)
		files = append(files, partials...)
		
		// Parse all the files
		tmpl, err = tmpl.ParseFiles(files...)
		if err != nil {
			return err
		}
		
		// Add to the map
		templates[name] = tmpl
	}
	
	{{if (call .HasFeature "basic-auth") -}}
	// Process admin templates
	adminPages, err := filepath.Glob("views/admin/*.html")
	if err != nil {
		return err
	}
	
	for _, page := range adminPages {
		name := "admin/" + filepath.Base(page) // e.g., "admin/dashboard.html"
		
		// Create a template for this page
		tmpl := template.New(filepath.Base(page)).Funcs(funcs)
		
		// Add layout templates
		layouts, err := filepath.Glob("views/layouts/*.html")
		if err != nil {
			return err
		}
		
		// Add partials
		partials, err := filepath.Glob("views/partials/*.html")
		if err != nil {
			return err
		}
		
		// Combine page with layouts and partials
		files := append([]string{page}, layouts...)
		files = append(files, partials...)
		
		// Parse all the files
		tmpl, err = tmpl.ParseFiles(files...)
		if err != nil {
			return err
		}
		
		// Add to the map
		templates[name] = tmpl
	}
	{{- end}}

	return nil
}

// Render renders a template with the given name and data
func Render(w http.ResponseWriter, name string, data interface{}) error {
	// Get the template from the cache
	tmpl, ok := templates[name]
	if !ok {
		return template.New("error").Parse("<h1>Template not found</h1>").Execute(w, nil)
	}
	
	// Set the content type
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	
	// Execute the template
	return tmpl.ExecuteTemplate(w, name, data)
}
