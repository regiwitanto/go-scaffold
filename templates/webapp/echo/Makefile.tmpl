.PHONY: run build test clean

# Binary name
BINARY_NAME={{if .Binary}}{{.Binary}}{{else}}app{{end}}

# Go build flags
GOFLAGS=-trimpath

# Default target
all: build

# Build the application
build:
	@echo "Building application..."
	go build ${GOFLAGS} -o ${BINARY_NAME} ./cmd/web

# Run the application
run:
	@echo "Running application..."
	go run ./cmd/web

# Run tests
test:
	@echo "Running tests..."
	go test -v ./...

# Run tests with coverage
test-coverage:
	@echo "Running tests with coverage..."
	go test -cover -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	go clean
	rm -f ${BINARY_NAME}
	rm -f coverage.out

# Lint the code
lint:
	@echo "Linting code..."
	golangci-lint run

{{- if (call .HasFeature "live-reload") }}
# Run with live reload
dev:
	@echo "Running with live reload..."
	air
{{- end}}

{{- if (call .HasFeature "sql-migrations") }}
# Database migration commands
migrate-up:
	@echo "Running database migrations..."
	migrate -path=./migrations -database="${DB_DSN}" up

migrate-down:
	@echo "Rolling back database migration..."
	migrate -path=./migrations -database="${DB_DSN}" down 1

migrate-create:
	@echo "Creating migration files..."
	@read -p "Enter migration name: " name; \
	migrate create -ext sql -dir ./migrations -seq $$name
{{end}}
