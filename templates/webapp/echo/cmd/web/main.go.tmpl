package main

import (
	"context"
	"fmt"
	"html/template"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	
	"{{.ModulePath}}/internal/config"
	{{if eq .DatabaseType "postgresql" -}}
	"{{.ModulePath}}/internal/database"
	{{- end}}
	"{{.ModulePath}}/internal/handlers"
	{{if (call .HasFeature "basic-auth") -}}
	customMiddleware "{{.ModulePath}}/internal/middleware"
	{{- end}}
	"{{.ModulePath}}/internal/templates"
	{{if (call .HasFeature "automatic-versioning") -}}
	"{{.ModulePath}}/internal/version"
	{{- end}}
)

// Template renderer
type TemplateRenderer struct {
	templates *template.Template
}

// Render implements echo.Renderer interface
func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}

func main() {
	{{if eq .ConfigType "env" -}}
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}
	{{- else -}}
	// Parse command line flags
	cfg := config.Parse()
	{{- end}}
	
	{{if (call .HasFeature "access-logging") -}}
	// Set up logging
	logger := log.New(os.Stdout, "", log.LstdFlags)
	{{- end}}
	
	{{if eq .DatabaseType "postgresql" -}}
	// Connect to the database
	db, err := database.Connect(cfg)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()
	
	{{if (call .HasFeature "sql-migrations") -}}
	// Run migrations
	if err := database.Migrate(cfg); err != nil {
		log.Fatalf("Failed to run migrations: %v", err)
	}
	{{- end}}
	{{- end}}

	// Initialize Echo instance
	e := echo.New()
	e.HideBanner = true
	
	// Configure middleware
	e.Use(middleware.Recover())
	{{if (call .HasFeature "access-logging") -}}
	e.Use(middleware.Logger())
	{{- end}}
	e.Use(middleware.Gzip())
	e.Use(middleware.CORS())
	
	// Set up template renderer
	renderer := &TemplateRenderer{
		templates: templates.Parse(),
	}
	e.Renderer = renderer
	
	// Serve static files
	e.Static("/static", "static")
	
	// Register handlers
	h := handlers.NewWebHandler({{if eq .DatabaseType "postgresql"}}db, {{end}}cfg)
	
	// Public routes
	e.GET("/", h.Home)
	e.GET("/about", h.About)
	
	{{if (call .HasFeature "basic-auth") -}}
	// Protected routes
	admin := e.Group("/admin")
	admin.Use(customMiddleware.BasicAuth(cfg.AuthUsername, cfg.AuthPassword))
	admin.GET("", h.AdminDashboard)
	{{- end}}
	
	// Start the server
	addr := fmt.Sprintf(":%d", cfg.Port)
	s := &http.Server{
		Addr:         addr,
		ReadTimeout:  60 * time.Second,
		WriteTimeout: 60 * time.Second,
		IdleTimeout:  120 * time.Second,
	}
	
	// Start server in a goroutine
	go func() {
		log.Printf("Server starting on port %d", cfg.Port)
		{{if (call .HasFeature "automatic-versioning") -}}
		log.Printf("Version: %s (Build: %s)", version.Version, version.BuildID)
		{{- end}}
		
		if err := e.StartServer(s); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server error: %v", err)
		}
	}()
	
	// Wait for interrupt signal to gracefully shut down the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	
	log.Println("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	
	if err := e.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}
	
	log.Println("Server exited properly")
}
