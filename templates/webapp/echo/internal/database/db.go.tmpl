package database

import (
	"database/sql"
	"fmt"
	
	_ "github.com/lib/pq"
	
	"{{.ModulePath}}/internal/config"
)

// Connect establishes a connection to the database
func Connect(cfg *config.Config) (*sql.DB, error) {
	dsn := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		cfg.DBHost, cfg.DBPort, cfg.DBUser, cfg.DBPassword, cfg.DBName, cfg.DBSSLMode)
	
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		return nil, err
	}
	
	if err := db.Ping(); err != nil {
		return nil, err
	}
	
	return db, nil
}

{{if (call .HasFeature "sql-migrations") -}}
// Migrate runs database migrations
func Migrate(cfg *config.Config) error {
	// Implementation depends on your migration library choice
	// Here's an example using golang-migrate
	
	migrationSource := "file://./migrations"
	dsn := fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=%s",
		cfg.DBUser, cfg.DBPassword, cfg.DBHost, cfg.DBPort, cfg.DBName, cfg.DBSSLMode)
	
	// You would implement the migration code here using your preferred library
	// Example using golang-migrate:
	// m, err := migrate.New(migrationSource, dsn)
	// if err != nil {
	//     return err
	// }
	// err = m.Up()
	// if err != nil && err != migrate.ErrNoChange {
	//     return err
	// }
	
	return nil
}
{{- end}}
