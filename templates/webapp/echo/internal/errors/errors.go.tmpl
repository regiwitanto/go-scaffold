package errors

import (
	"fmt"
	"net/http"
	"runtime/debug"

	"github.com/labstack/echo/v4"
	"github.com/labstack/gommon/log"
)

// Custom error types
type AppError struct {
	StatusCode int    `json:"status"`
	Code       string `json:"code"`
	Message    string `json:"message"`
}

func (e AppError) Error() string {
	return e.Message
}

// NewNotFoundError creates a new 404 error
func NewNotFoundError(format string, args ...interface{}) *AppError {
	return &AppError{
		StatusCode: http.StatusNotFound,
		Code:       "NOT_FOUND",
		Message:    fmt.Sprintf(format, args...),
	}
}

// NewBadRequestError creates a new 400 error
func NewBadRequestError(format string, args ...interface{}) *AppError {
	return &AppError{
		StatusCode: http.StatusBadRequest,
		Code:       "BAD_REQUEST",
		Message:    fmt.Sprintf(format, args...),
	}
}

// NewInternalServerError creates a new 500 error
func NewInternalServerError(format string, args ...interface{}) *AppError {
	return &AppError{
		StatusCode: http.StatusInternalServerError,
		Code:       "INTERNAL_SERVER_ERROR",
		Message:    fmt.Sprintf(format, args...),
	}
}

// NewUnauthorizedError creates a new 401 error
func NewUnauthorizedError(format string, args ...interface{}) *AppError {
	return &AppError{
		StatusCode: http.StatusUnauthorized,
		Code:       "UNAUTHORIZED",
		Message:    fmt.Sprintf(format, args...),
	}
}

// NewForbiddenError creates a new 403 error
func NewForbiddenError(format string, args ...interface{}) *AppError {
	return &AppError{
		StatusCode: http.StatusForbidden,
		Code:       "FORBIDDEN",
		Message:    fmt.Sprintf(format, args...),
	}
}

// CustomHTTPErrorHandler is a custom error handler for Echo
func CustomHTTPErrorHandler(err error, c echo.Context) {
	var (
		code    = http.StatusInternalServerError
		message interface{}
	)

	if he, ok := err.(*echo.HTTPError); ok {
		// Echo HTTP error
		code = he.Code
		message = he.Message
	} else if ae, ok := err.(*AppError); ok {
		// Application error
		code = ae.StatusCode
		message = ae
	} else {
		// Unknown error
		message = &AppError{
			StatusCode: http.StatusInternalServerError,
			Code:       "INTERNAL_SERVER_ERROR",
			Message:    err.Error(),
		}
	}

	// Log the error for 5xx
	if code >= 500 {
		log.Errorf("Server error: %v\n%s", err, debug.Stack())
	}

	// Check if the request accepts HTML
	if c.Request().Header.Get("Accept") == "application/json" {
		// Respond with JSON
		if err := c.JSON(code, message); err != nil {
			c.Logger().Error(err)
		}
	} else {
		// Respond with HTML error page
		data := map[string]interface{}{
			"Title":   fmt.Sprintf("Error %d", code),
			"Code":    code,
			"Message": message,
		}
		
		if err := c.Render(code, "error.html", data); err != nil {
			c.Logger().Error(err)
			c.String(code, fmt.Sprintf("Error %d: %v", code, message))
		}
	}
}
