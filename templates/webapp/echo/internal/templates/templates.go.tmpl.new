package templates

import (
	"html/template"
	"path/filepath"
)

// Parse parses all HTML templates in the views directory
func Parse() *template.Template {
	// Create a new template with functions
	t := template.New("").Funcs(template.FuncMap{
		"safeHTML": func(s string) template.HTML {
			return template.HTML(s)
		},
		"safeURL": func(s string) template.URL {
			return template.URL(s)
		},
	})
	
	// Parse all templates in the views directory
	if templates, err := filepath.Glob("views/*.html"); err == nil && len(templates) > 0 {
		t, err = t.ParseFiles(templates...)
		if err != nil {
			panic(err)
		}
	}
	
	// Parse layout templates if they exist
	if layouts, err := filepath.Glob("views/layouts/*.html"); err == nil && len(layouts) > 0 {
		t, err = t.ParseFiles(layouts...)
		if err != nil {
			panic(err)
		}
	}
	
	// Parse partial templates if they exist
	if partials, err := filepath.Glob("views/partials/*.html"); err == nil && len(partials) > 0 {
		t, err = t.ParseFiles(partials...)
		if err != nil {
			panic(err)
		}
	}
	
	{{if (call .HasFeature "basic-auth") -}}
	// Parse admin templates if they exist
	if admin, err := filepath.Glob("views/admin/*.html"); err == nil && len(admin) > 0 {
		t, err = t.ParseFiles(admin...)
		if err != nil {
			panic(err)
		}
	}
	{{- end}}
	
	return t
}
