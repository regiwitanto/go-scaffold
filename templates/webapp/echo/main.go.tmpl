package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"{{.ModulePath}}/internal/errors"
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/templates"
{{if eq .DatabaseType "postgresql" }}
	"{{.ModulePath}}/internal/db"
{{else if eq .DatabaseType "mysql" }}
	"{{.ModulePath}}/internal/db"
{{else if eq .DatabaseType "sqlite" }}
	"{{.ModulePath}}/internal/db"
{{end}}
)

func main() {
	// Initialize Echo instance
	e := echo.New()
	e.HideBanner = true
	e.HTTPErrorHandler = errors.CustomHTTPErrorHandler

	// Configure middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())
	
{{if eq .DatabaseType "postgresql" }}
	// Initialize database
	dbConfig := db.Config{
		DSN:         os.Getenv("DATABASE_URL"),
		MaxOpenConn: 25,
		MaxIdleConn: 25,
		MaxIdleTime: 15 * time.Minute,
	}
	
	database, err := db.New(dbConfig)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()
{{else if eq .DatabaseType "mysql" }}
	// Initialize database
	dbConfig := db.Config{
		DSN:         os.Getenv("DATABASE_URL"),
		MaxOpenConn: 25,
		MaxIdleConn: 25,
		MaxIdleTime: 15 * time.Minute,
	}
	
	database, err := db.New(dbConfig)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()
{{else if eq .DatabaseType "sqlite" }}
	// Initialize database
	dbConfig := db.Config{
		DSN:         "app.db",
		MaxOpenConn: 1, // SQLite supports only one writer at a time
		MaxIdleConn: 1,
		MaxIdleTime: 15 * time.Minute,
	}
	
	database, err := db.New(dbConfig)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()
{{end}}

	// Initialize template renderer
	t := templates.New()
	e.Renderer = t

	// Serve static files
	e.Static("/static", "static")

	// Setup routes
{{if ne .DatabaseType "none" }}
	handlers.RegisterRoutes(e, database)
{{else}}
	handlers.RegisterRoutes(e)
{{end}}

	// Start server in a goroutine
	go func() {
		if err := e.Start(":8080"); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatalf("shutting down the server: %v", err)
		}
	}()

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit

	// Shutdown gracefully
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}
