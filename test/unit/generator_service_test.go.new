package unit

import (
	"errors"
	"testing"

	"github.com/regiwitanto/go-scaffold/internal/domain/model"
	"github.com/regiwitanto/go-scaffold/test/mocks"
)

func TestGenerateScaffold(t *testing.T) {
	// Create mock service
	mockService := &mocks.MockGeneratorService{
		GenerateScaffoldFunc: func(opts model.ScaffoldOptions) (*model.GeneratedScaffold, error) {
			return &model.GeneratedScaffold{
				ID:        "test-id",
				Options:   opts,
				CreatedAt: "2023-01-01T00:00:00Z",
				FilePath:  "/tmp/test-scaffold.zip",
				Size:      1024,
			}, nil
		},
	}

	// Test with valid options
	options := model.ScaffoldOptions{
		AppType:      "api",
		RouterType:   "echo",
		DatabaseType: "postgresql",
		ModulePath:   "github.com/example/test-app",
		Features:     []string{"basic-auth"},
	}

	scaffold, err := mockService.GenerateScaffold(options)
	if err != nil {
		t.Fatalf("Failed to generate scaffold: %v", err)
	}

	// Verify the scaffold
	if scaffold == nil {
		t.Fatal("Expected scaffold to be returned, got nil")
	}

	// Verify the mock service was called with correct options
	if !mockService.GenerateScaffoldCalled {
		t.Error("Expected GenerateScaffold to be called")
	}

	// Verify the returned scaffold has the expected ID
	if scaffold.ID != "test-id" {
		t.Errorf("Expected scaffold ID to be 'test-id', got '%s'", scaffold.ID)
	}

	// Verify the options were passed correctly
	if scaffold.Options.AppType != options.AppType {
		t.Errorf("Expected AppType to be '%s', got '%s'", options.AppType, scaffold.Options.AppType)
	}

	if scaffold.Options.RouterType != options.RouterType {
		t.Errorf("Expected RouterType to be '%s', got '%s'", options.RouterType, scaffold.Options.RouterType)
	}
}

func TestGetScaffold(t *testing.T) {
	// Create mock service
	mockService := &mocks.MockGeneratorService{
		GetScaffoldFunc: func(id string) (*model.GeneratedScaffold, error) {
			if id == "test-id" {
				return &model.GeneratedScaffold{
					ID:        "test-id",
					Options:   model.ScaffoldOptions{},
					CreatedAt: "2023-01-01T00:00:00Z",
					FilePath:  "/tmp/scaffolds/test-id.zip",
					Size:      1000,
				}, nil
			}
			return nil, errors.New("scaffold not found")
		},
	}

	// Test with existing scaffold
	scaffold, err := mockService.GetScaffold("test-id")
	if err != nil {
		t.Fatalf("Failed to get scaffold: %v", err)
	}

	// Verify the scaffold
	if scaffold == nil {
		t.Fatal("Expected scaffold to be returned, got nil")
	}
	if scaffold.ID != "test-id" {
		t.Errorf("Expected ID to be 'test-id', got '%s'", scaffold.ID)
	}

	// Verify mock service was called
	if !mockService.GetScaffoldCalled {
		t.Error("Expected GetScaffold to be called")
	}
	if mockService.GetScaffoldID != "test-id" {
		t.Errorf("Expected GetScaffold to be called with 'test-id', got '%s'", mockService.GetScaffoldID)
	}

	// Test with non-existent scaffold
	_, err = mockService.GetScaffold("non-existent")
	if err == nil {
		t.Error("Expected error when getting non-existent scaffold")
	}
}
